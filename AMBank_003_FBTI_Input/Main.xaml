<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:mvf="clr-namespace:Microsoft.VisualBasic.FileIO;assembly=Microsoft.VisualBasic" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ss="clr-namespace:System.Security;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Allows the Orchestrator queue name to be passed as an argument, instead of only being defined in the configuration file." Name="in_OrchestratorQueueName" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Allows the Orchestrator folder name where the queue is created to be passed as an argument, instead of only being defined in the configuration file." Name="in_OrchestratorQueueFolder" Type="InArgument(x:String)" />
    <x:Property Name="in_dtInvoiceData" Type="InArgument(sd:DataTable)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1016,849</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Main2_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="51">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Net</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Windows.Forms.Integration</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Files.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.MicrosoftOffice365.Files.Models</x:String>
      <x:String>UiPath.MicrosoftOffice365.Enums</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Files</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.Collections.Specialized</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="42">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>WindowsFormsIntegration</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <StateMachine InitialState="{x:Reference __ReferenceID3}" sap2010:Annotation.AnnotationText="[Process title]&#xA;[Process description]&#xA;[Additional information (e.g., author, contact information and applications involved and required external setup)]" DisplayName="General Business Process" sap:VirtualizedContainerService.HintSize="638,784" sap2010:WorkflowViewState.IdRef="StateMachine_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <av:Point x:Key="ShapeLocation">70,22.5</av:Point>
        <x:Double x:Key="StateContainerWidth">604</x:Double>
        <x:Double x:Key="StateContainerHeight">676</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">130,60 130,58.1666666666667 223,58.1666666666667</av:PointCollection>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <State x:Name="__ReferenceID0" sap2010:Annotation.AnnotationText="Get the next transaction to be processed." DisplayName="Get Transaction Data" sap:VirtualizedContainerService.HintSize="251,112" sap2010:WorkflowViewState.IdRef="State_4">
      <State.Entry>
        <Sequence sap2010:Annotation.AnnotationText="Retrieve a new transaction data to be processed.&#xA;The TransactionNumber variable holds the current transaction number and incrementing this variable makes the framework retrieve the next transaction. If the framework is retrying a failed transaction, this variable is not incremented until the maximum number of retry attempts is reached." DisplayName="Retrieve Data" sap:VirtualizedContainerService.HintSize="901,1337" sap2010:WorkflowViewState.IdRef="Sequence_25">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Boolean" Name="ShouldStop" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="859,139" sap2010:WorkflowViewState.IdRef="AddLogFields_9">
            <ui:AddLogFields.Fields>
              <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Get Transaction Data</InArgument>
            </ui:AddLogFields.Fields>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:AddLogFields>
          <ui:ShouldStop DisplayName="Check Stop Signal" sap:VirtualizedContainerService.HintSize="859,22" sap2010:WorkflowViewState.IdRef="ShouldStop_2" Result="[ShouldStop]" />
          <If Condition="[ShouldStop]" DisplayName="Should Stop or Get Next" sap:VirtualizedContainerService.HintSize="859,947" sap2010:WorkflowViewState.IdRef="If_11">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence DisplayName="Orchestrator stop requested" sap:VirtualizedContainerService.HintSize="376,304" sap2010:WorkflowViewState.IdRef="Sequence_23">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_45" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Stop process requested.</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <Assign DisplayName="End Process (Stop process requested)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_22">
                  <Assign.To>
                    <OutArgument x:TypeArguments="ui:QueueItem">[TransactionItem]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="ui:QueueItem">[Nothing]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </If.Then>
            <If.Else>
              <TryCatch DisplayName="Try GetTransactionData" sap:VirtualizedContainerService.HintSize="438,789" sap2010:WorkflowViewState.IdRef="TryCatch_7">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <TryCatch.Try>
                  <Sequence sap:VirtualizedContainerService.HintSize="376,562" sap2010:WorkflowViewState.IdRef="Sequence_48">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_13">
                      <ui:AddLogFields.Fields>
                        <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">GetTransactionData</InArgument>
                      </ui:AddLogFields.Fields>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:AddLogFields>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetTransactionData workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_20" UnSafe="False" WorkflowFileName="Framework\GetTransactionData.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:Int32" x:Key="in_TransactionNumber">[TransactionNumber]</InArgument>
                        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                        <OutArgument x:TypeArguments="ui:QueueItem" x:Key="out_TransactionItem">[TransactionItem]</OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="out_TransactionField1">[TransactionField1]</OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="out_TransactionField2">[TransactionField2]</OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="out_TransactionID">[TransactionID]</OutArgument>
                        <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dt_TransactionData">[dt_TransactionData]</InOutArgument>
                        <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedAuditData">[dtConsolidatedAuditData]</InOutArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                    <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_23">
                      <ui:AddLogFields.Fields>
                        <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Get Transaction Data</InArgument>
                      </ui:AddLogFields.Fields>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:AddLogFields>
                  </Sequence>
                </TryCatch.Try>
                <TryCatch.Catches>
                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_8">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ActivityAction x:TypeArguments="s:Exception">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Log exception message and end process" sap:VirtualizedContainerService.HintSize="376,304" sap2010:WorkflowViewState.IdRef="Sequence_24">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_46" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">[Config("LogMessage_GetTransactionDataError").ToString+TransactionNumber.ToString+". "+Exception.Message+" at Source: "+Exception.Source]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Fatal</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                        </ui:InvokeWorkflowFile>
                        <Assign DisplayName="End Process (Could not get new transaction)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_23">
                          <Assign.To>
                            <OutArgument x:TypeArguments="ui:QueueItem">[TransactionItem]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="ui:QueueItem">[Nothing]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ActivityAction>
                  </Catch>
                </TryCatch.Catches>
              </TryCatch>
            </If.Else>
          </If>
        </Sequence>
      </State.Entry>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">224.333333333333,212.333333333333</av:Point>
          <av:Size x:Key="ShapeSize">251,112</av:Size>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Double x:Key="StateContainerWidth">217</x:Double>
          <x:Double x:Key="StateContainerHeight">34</x:Double>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <State.Transitions>
        <Transition DisplayName="New Transaction" sap:VirtualizedContainerService.HintSize="450,509" sap2010:WorkflowViewState.IdRef="Transition_6">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:PointCollection x:Key="ConnectorLocation">349.833333333333,324.333333333333 349.833333333333,440.666666666667</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">38</x:Int32>
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <State x:Name="__ReferenceID2" sap2010:Annotation.AnnotationText="Process a single transaction. &#xA;The result of the processing can be: 1) Success, 2) Business Exception, 3) System Exception. &#xA;In the case of a system exception, the transaction can be automatically retried." DisplayName="Process Transaction" sap:VirtualizedContainerService.HintSize="231,187" sap2010:WorkflowViewState.IdRef="State_3">
              <State.Entry>
                <TryCatch DisplayName="Try to process transaction" sap:VirtualizedContainerService.HintSize="438,1333" sap2010:WorkflowViewState.IdRef="TryCatch_9">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch.Try>
                    <Sequence DisplayName="Private: Process the current TransactionItem" sap:VirtualizedContainerService.HintSize="376,1084" sap2010:WorkflowViewState.IdRef="Sequence_28">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_14">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Process Transaction</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_44" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Entered into Process State</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <Assign DisplayName="Assign BusinessException" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_25">
                        <Assign.To>
                          <OutArgument x:TypeArguments="ui:BusinessRuleException">[BusinessException]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="ui:BusinessRuleException">[Nothing]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_15">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Process</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Process workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_24" UnSafe="False" WorkflowFileName="Framework\Process.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                            <mva:VisualBasicValue x:TypeArguments="ui:QueueItem" ExpressionText="TransactionItem" />
                          </InArgument>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                            <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_strFBTIUserId">
                            <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="strFBTIUserID" />
                          </InArgument>
                          <InArgument x:TypeArguments="ss:SecureString" x:Key="in_secStrFBTIPassword">
                            <mva:VisualBasicValue x:TypeArguments="ss:SecureString" ExpressionText="secStrFBTIPassword" />
                          </InArgument>
                          <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedAuditData">
                            <mva:VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtConsolidatedAuditData" />
                          </InOutArgument>
                          <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedTransactionData">
                            <mva:VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtConsolidatedTransactionData" />
                          </InOutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_26">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Process Transaction</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                      <TryCatch DisplayName="Try Catch Set Transaction Status (Success)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="TryCatch_10">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <TryCatch.Try>
                          <Sequence sap:VirtualizedContainerService.HintSize="376,562" sap2010:WorkflowViewState.IdRef="Sequence_49">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_17">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">SetTransactionStatus</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SetTransactionStatus (Success)" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_26" UnSafe="False" WorkflowFileName="Framework\SetTransactionStatus.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException">
                                  <mva:VisualBasicValue x:TypeArguments="ui:BusinessRuleException" ExpressionText="Nothing" />
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField1">
                                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionField1" />
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField2">
                                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionField2" />
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_TransactionID">
                                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionID" />
                                </InArgument>
                                <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException">
                                  <mva:VisualBasicValue x:TypeArguments="s:Exception" ExpressionText="Nothing" />
                                </InArgument>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                  <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                                </InArgument>
                                <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                                  <mva:VisualBasicValue x:TypeArguments="ui:QueueItem" ExpressionText="TransactionItem" />
                                </InArgument>
                                <InOutArgument x:TypeArguments="x:Int32" x:Key="io_RetryNumber">
                                  <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="RetryNumber" />
                                </InOutArgument>
                                <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TransactionNumber">
                                  <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="TransactionNumber" />
                                </InOutArgument>
                                <InOutArgument x:TypeArguments="x:Int32" x:Key="io_ConsecutiveSystemExceptions">
                                  <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="ConsecutiveSystemExceptions" />
                                </InOutArgument>
                                <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedAuditData">
                                  <mva:VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtConsolidatedAuditData" />
                                </InOutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_18">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Process Transaction</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                          </Sequence>
                        </TryCatch.Try>
                        <TryCatch.Catches>
                          <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_11">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ActivityAction x:TypeArguments="s:Exception">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                              </ActivityAction.Argument>
                              <ui:LogMessage DisplayName="Log message (Failed to set transaction status Success)" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_32" Level="Fatal" Message="[&quot;SetTransactionStatus.xaml failed: &quot;+exception.Message+&quot; at Source: &quot;+exception.Source]" />
                            </ActivityAction>
                          </Catch>
                        </TryCatch.Catches>
                      </TryCatch>
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="ui:BusinessRuleException" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_9">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="ui:BusinessRuleException">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="ui:BusinessRuleException" Name="Exception" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Handle Business Exception" sap:VirtualizedContainerService.HintSize="304,243" sap2010:WorkflowViewState.IdRef="Sequence_29">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign DisplayName="Set transaction status to BusinessRuleException" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_26">
                            <Assign.To>
                              <OutArgument x:TypeArguments="ui:BusinessRuleException">[BusinessException]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="ui:BusinessRuleException">[Exception]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <TryCatch DisplayName="Try Catch Set Transaction Status (BRE)" sap:VirtualizedContainerService.HintSize="262,51" sap2010:WorkflowViewState.IdRef="TryCatch_11">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <TryCatch.Try>
                              <Sequence sap:VirtualizedContainerService.HintSize="376,562" sap2010:WorkflowViewState.IdRef="Sequence_52">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_34">
                                  <ui:AddLogFields.Fields>
                                    <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">SetTransactionStatus</InArgument>
                                  </ui:AddLogFields.Fields>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:AddLogFields>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SetTransactionStatus (BRE)" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_28" UnSafe="False" WorkflowFileName="Framework\SetTransactionStatus.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException">
                                      <mva:VisualBasicValue x:TypeArguments="ui:BusinessRuleException" ExpressionText="BusinessException" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField1">
                                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionField1" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField2">
                                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionField2" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionID">
                                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionID" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException">
                                      <mva:VisualBasicValue x:TypeArguments="s:Exception" ExpressionText="Nothing" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                      <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                                      <mva:VisualBasicValue x:TypeArguments="ui:QueueItem" ExpressionText="TransactionItem" />
                                    </InArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_RetryNumber">
                                      <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="RetryNumber" />
                                    </InOutArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TransactionNumber">
                                      <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="TransactionNumber" />
                                    </InOutArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_ConsecutiveSystemExceptions">
                                      <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="ConsecutiveSystemExceptions" />
                                    </InOutArgument>
                                    <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedAuditData">
                                      <mva:VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtConsolidatedAuditData" />
                                    </InOutArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_35">
                                  <ui:AddLogFields.Fields>
                                    <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Process Transaction</InArgument>
                                  </ui:AddLogFields.Fields>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:AddLogFields>
                              </Sequence>
                            </TryCatch.Try>
                            <TryCatch.Catches>
                              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,22" sap2010:WorkflowViewState.IdRef="Catch`1_12">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ActivityAction x:TypeArguments="s:Exception">
                                  <ActivityAction.Argument>
                                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                  </ActivityAction.Argument>
                                  <ui:LogMessage DisplayName="Log message (Failed to set transaction status BRE)" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_33" Level="Fatal" Message="[&quot;SetTransactionStatus.xaml failed: &quot;+exception.Message+&quot; at Source: &quot;+exception.Source]" />
                                </ActivityAction>
                              </Catch>
                            </TryCatch.Catches>
                          </TryCatch>
                        </Sequence>
                      </ActivityAction>
                    </Catch>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_10">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Handle System Exception" sap:VirtualizedContainerService.HintSize="304,243" sap2010:WorkflowViewState.IdRef="Sequence_30">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign DisplayName="Set transaction status to SystemException" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_27">
                            <Assign.To>
                              <OutArgument x:TypeArguments="s:Exception">[SystemException]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="s:Exception">[Exception]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <TryCatch DisplayName="Try Catch SetTransactionStatus (SE)" sap:VirtualizedContainerService.HintSize="262,51" sap2010:WorkflowViewState.IdRef="TryCatch_12">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <TryCatch.Try>
                              <Sequence sap:VirtualizedContainerService.HintSize="376,562" sap2010:WorkflowViewState.IdRef="Sequence_51">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_32">
                                  <ui:AddLogFields.Fields>
                                    <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Process Transaction</InArgument>
                                  </ui:AddLogFields.Fields>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:AddLogFields>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SetTransactionStatus (SE)" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_29" UnSafe="False" WorkflowFileName="Framework\SetTransactionStatus.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException">
                                      <mva:VisualBasicValue x:TypeArguments="ui:BusinessRuleException" ExpressionText="Nothing" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField1">
                                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionField1" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionField2">
                                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionField2" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_TransactionID">
                                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TransactionID" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException">
                                      <mva:VisualBasicValue x:TypeArguments="s:Exception" ExpressionText="SystemException" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                      <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                                    </InArgument>
                                    <InArgument x:TypeArguments="ui:QueueItem" x:Key="in_TransactionItem">
                                      <mva:VisualBasicValue x:TypeArguments="ui:QueueItem" ExpressionText="TransactionItem" />
                                    </InArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_RetryNumber">
                                      <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="RetryNumber" />
                                    </InOutArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TransactionNumber">
                                      <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="TransactionNumber" />
                                    </InOutArgument>
                                    <InOutArgument x:TypeArguments="x:Int32" x:Key="io_ConsecutiveSystemExceptions">
                                      <mva:VisualBasicReference x:TypeArguments="x:Int32" ExpressionText="ConsecutiveSystemExceptions" />
                                    </InOutArgument>
                                    <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedAuditData">
                                      <mva:VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtConsolidatedAuditData" />
                                    </InOutArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_33">
                                  <ui:AddLogFields.Fields>
                                    <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Process Transaction</InArgument>
                                  </ui:AddLogFields.Fields>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:AddLogFields>
                              </Sequence>
                            </TryCatch.Try>
                            <TryCatch.Catches>
                              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,22" sap2010:WorkflowViewState.IdRef="Catch`1_13">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ActivityAction x:TypeArguments="s:Exception">
                                  <ActivityAction.Argument>
                                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                  </ActivityAction.Argument>
                                  <ui:LogMessage DisplayName="Log message (Failed to set transaction status SE)" sap:VirtualizedContainerService.HintSize="334,93" sap2010:WorkflowViewState.IdRef="LogMessage_34" Level="Fatal" Message="[&quot;SetTransactionStatus.xaml failed: &quot;+exception.Message+&quot; at Source: &quot;+exception.Source]" />
                                </ActivityAction>
                              </Catch>
                            </TryCatch.Catches>
                          </TryCatch>
                        </Sequence>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </State.Entry>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">234.333333333333,440.666666666667</av:Point>
                  <av:Size x:Key="ShapeSize">231,187</av:Size>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Double x:Key="StateContainerWidth">197</x:Double>
                  <x:Double x:Key="StateContainerHeight">34</x:Double>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <State.Transitions>
                <Transition sap2010:Annotation.AnnotationText="There is no need for any action in case of successful transaction.&#xA;The process should simply go to next transaction." DisplayName="Success" sap:VirtualizedContainerService.HintSize="450,549" sap2010:WorkflowViewState.IdRef="Transition_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">465.333333333333,478.066666666667 495.333333333333,478.066666666667 495.333333333333,307.533333333333 475.333333333333,307.533333333333</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">12</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">64</x:Int32>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID0</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_68" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Transaction item is successfull moving get transaction state</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[SystemException Is Nothing And BusinessException is Nothing]</Transition.Condition>
                </Transition>
                <Transition sap2010:Annotation.AnnotationText="Business Rule Exception" DisplayName="Business Exception" sap:VirtualizedContainerService.HintSize="450,538" sap2010:WorkflowViewState.IdRef="Transition_1">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">465.333333333333,534.166666666667 521.5,534.166666666667 521.5,290.733333333333 475.333333333333,290.733333333333</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">36</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">52</x:Int32>
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID0</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_70" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Business exception at process: " + BusinessException.Message + " at Source: " + BusinessException.Source]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[BusinessException IsNot Nothing]</Transition.Condition>
                </Transition>
                <Transition DisplayName="System Exception" sap:VirtualizedContainerService.HintSize="450,507" sap2010:WorkflowViewState.IdRef="Transition_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">465.333333333333,599.616666666667 546.5,599.616666666667 546.5,268.333333333333 475.333333333333,268.333333333333</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">64</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">36</x:Int32>
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID0</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_69" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["System exception at process: " + SystemException.Message + " at Source: " + SystemException.Source]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[SystemException IsNot Nothing]</Transition.Condition>
                </Transition>
              </State.Transitions>
              <State.Variables>
                <Variable x:TypeArguments="x:String" Name="strReferenceNumber" />
              </State.Variables>
            </State>
          </Transition.To>
          <Transition.Action>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_74" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">[Config("LogMessage_GetTransactionData").ToString+TransactionNumber.ToString]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </Transition.Action>
          <Transition.Condition>[TransactionItem IsNot Nothing]</Transition.Condition>
        </Transition>
        <Transition DisplayName="No Data" sap:VirtualizedContainerService.HintSize="450,507" sap2010:WorkflowViewState.IdRef="Transition_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:PointCollection x:Key="ConnectorLocation">475.333333333333,245.933333333333 505.333333333333,245.933333333333 505.333333333333,63.3166666666667 477,63.3166666666667</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">20</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">40</x:Int32>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <State x:Name="__ReferenceID3" sap2010:Annotation.AnnotationText="Read configuration file and initialize applications used in the process." DisplayName="Initialization" sap:VirtualizedContainerService.HintSize="524,2571" sap2010:WorkflowViewState.IdRef="State_2">
              <State.Entry>
                <TryCatch DisplayName="Try initializing settings and applications" sap:VirtualizedContainerService.HintSize="478,2099" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch.Try>
                    <Sequence DisplayName="Load configurations and open applications" sap:VirtualizedContainerService.HintSize="526,8596" sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Boolean" Name="blnHomePage" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="484,139" sap2010:WorkflowViewState.IdRef="AddLogFields_3">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                      <Assign DisplayName="Assign SystemException (initialization)" sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                        <Assign.To>
                          <OutArgument x:TypeArguments="s:Exception">[SystemException]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="s:Exception">[Nothing]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <If sap2010:Annotation.AnnotationText="An uninitialized Config dictionary indicates that it is the first run of the process." Condition="[Config is Nothing]" DisplayName="If first run, read local configuration file" sap:VirtualizedContainerService.HintSize="484,7282" sap2010:WorkflowViewState.IdRef="If_1">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence DisplayName="First run" sap:VirtualizedContainerService.HintSize="418,7064" sap2010:WorkflowViewState.IdRef="Sequence_17">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:String" Name="strShareDriveConfigFilePath" />
                              <Variable x:TypeArguments="x:String" Name="strLocalDriveConfigFilePath" />
                              <Variable x:TypeArguments="s:String[]" Name="arrStrLDConfigurationFP" />
                              <Variable x:TypeArguments="x:String" Name="strLDConfigurationFP" />
                              <Variable x:TypeArguments="x:String" Name="strRunningDate" />
                              <Variable x:TypeArguments="x:String" Name="strRunningTime" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="376,60" sap2010:WorkflowViewState.IdRef="Assign_34">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[strRunningDate]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[Now.ToString("dd-MMM-yyyy")]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign sap:VirtualizedContainerService.HintSize="376,60" sap2010:WorkflowViewState.IdRef="Assign_35">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[strRunningTime]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[Now.ToString("HH:mm:ss")]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_57" Level="Info" Message="[&quot;Bot start run time is: &quot; + strRunningDate + &quot; &quot; + strRunningTime]" />
                            <ui:LogMessage DisplayName="Log Message screen resolution" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_52" Level="Info" Message="[&quot;The primary screen resolution is: &quot;+Screen.PrimaryScreen.Bounds.Width.ToString+&quot; x &quot;+ Screen.PrimaryScreen.Bounds.Height.ToString]" />
                            <ui:Comment sap:VirtualizedContainerService.HintSize="376,93" sap2010:WorkflowViewState.IdRef="Comment_1" Text="Share Dive Config file path asset name and folder name is hard coded please change the value if folder/asset is changed." />
                            <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="AMBank_003_FBTI_Input_ShareDrive_ConfigFilePath" CacheStrategy="None" DisplayName="Get Asset(Config share drive file path fom orchestrator)" FolderPath="GO_UAT_E-Trade" sap:VirtualizedContainerService.HintSize="376,137" sap2010:WorkflowViewState.IdRef="GetRobotAsset_1">
                              <ui:GetRobotAsset.Value>
                                <OutArgument x:TypeArguments="x:String">[strShareDriveConfigFilePath]</OutArgument>
                              </ui:GetRobotAsset.Value>
                            </ui:GetRobotAsset>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_38" Level="Info" Message="[&quot;Share Drive Config file path is: &quot; + strShareDriveConfigFilePath]" />
                            <ui:Comment sap:VirtualizedContainerService.HintSize="376,93" sap2010:WorkflowViewState.IdRef="Comment_2" Text="local Dive Config file path asset name and folder name is hard coded please change the value if folder/asset is changed." />
                            <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="AMBank_003_FBTI_Input_LocalDrive_ConfigFilePath" CacheStrategy="None" DisplayName="Get Asset(Config local drive file path fom orchestrator)" FolderPath="GO_UAT_E-Trade" sap:VirtualizedContainerService.HintSize="376,137" sap2010:WorkflowViewState.IdRef="GetRobotAsset_2">
                              <ui:GetRobotAsset.Value>
                                <OutArgument x:TypeArguments="x:String">[strLocalDriveConfigFilePath]</OutArgument>
                              </ui:GetRobotAsset.Value>
                            </ui:GetRobotAsset>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_43" Level="Info" Message="[&quot;Local Drive Config file path is: &quot; + strLocalDriveConfigFilePath]" />
                            <Assign sap:VirtualizedContainerService.HintSize="376,60" sap2010:WorkflowViewState.IdRef="Assign_32">
                              <Assign.To>
                                <OutArgument x:TypeArguments="s:String[]">[arrStrLDConfigurationFP]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="s:String[]">[Split(strLocalDriveConfigFilePath, "\")]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign DisplayName="Private: Assign" sap:VirtualizedContainerService.HintSize="376,60" sap2010:WorkflowViewState.IdRef="Assign_33">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[strLDConfigurationFP]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[String.Join("\",arrStrLDConfigurationFP.Take(arrStrLDConfigurationFP.Count() - 1).ToArray)]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_53" Level="Info" Message="[&quot;Local drive configuration folder path is &quot; + strLDConfigurationFP]" />
                            <If Condition="[Directory.Exists(strLDConfigurationFP)]" DisplayName="If(Creating Local Drive Configuration Folder If not exits)" sap:VirtualizedContainerService.HintSize="376,51" sap2010:WorkflowViewState.IdRef="If_17">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_54" Level="Info" Message="[&quot;Local drive configuration folder path(&quot; + strLDConfigurationFP + &quot;) exists.&quot;]" />
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="376,433" sap2010:WorkflowViewState.IdRef="Sequence_40">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_55" Level="Info" Message="[&quot;Local drive configuration folder path(&quot; + strLDConfigurationFP + &quot;) not exists.&quot;]" />
                                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_3" Path="[strLDConfigurationFP]" />
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_56" Level="Info" Message="[&quot;Local drive configuration folder path(&quot; + strLDConfigurationFP + &quot;) created.&quot;]" />
                                </Sequence>
                              </If.Else>
                            </If>
                            <ui:KillProcess AppliesTo="{x:Null}" Process="{x:Null}" ContinueOnError="True" DisplayName="Kill Process" sap:VirtualizedContainerService.HintSize="376,132" sap2010:WorkflowViewState.IdRef="KillProcess_1" ProcessName="EXCEL" />
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_51" Level="Info" Message="[&quot;Excel application killed&quot;]" />
                            <ui:CopyFile ContinueOnError="{x:Null}" Destination="[strLocalDriveConfigFilePath]" DisplayName="Copy File(Copying Configuration file)" sap:VirtualizedContainerService.HintSize="376,152" sap2010:WorkflowViewState.IdRef="CopyFile_1" Overwrite="True" Path="[strShareDriveConfigFilePath]" />
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="376,91" sap2010:WorkflowViewState.IdRef="LogMessage_44" Level="Info" Message="[&quot;Config file copied from: &quot; + strShareDriveConfigFilePath + &quot; to: &quot; + strLocalDriveConfigFilePath]" />
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_4">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">InitAllSettings</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitAllSettings workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="Framework\InitAllSettings.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFile">[strLocalDriveConfigFilePath]</InArgument>
                                <InArgument x:TypeArguments="s:String[]" x:Key="in_ConfigSheets">[{"Settings", "Constants"}]</InArgument>
                                <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="out_Config">[Config]</OutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_19">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:MultipleAssign DisplayName="Multiple Assign(Year, Month, Date,Time and Machine Name)" sap:VirtualizedContainerService.HintSize="376,51" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
                              <ui:MultipleAssign.AssignOperations>
                                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="x:Object">[Config("CurrentYear")]</OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="x:Object">[Now.ToString(Config("CurrentYearFormat").ToString)]</InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="x:Object">[Config("CurrentMonth")]</OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="x:Object">[Now.ToString(Config("CurrentMonthFormat").ToString)]</InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="x:Object">[Config("CurrentDate")]</OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="x:Object">[DateTime.ParseExact(strRunningDate,"dd-MMM-yyyy",System.Globalization.CultureInfo.InvariantCulture).ToString(Config("CurrentDateFormat").ToString)]</InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="x:Object">[Config("CurrentTime")]</OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="x:Object">[DateTime.ParseExact(strRunningTime,"HH:mm:ss",System.Globalization.CultureInfo.InvariantCulture).ToString(Config("CurrentTimeFormat").ToString)]</InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                                    <ui:AssignOperation.To>
                                      <OutArgument x:TypeArguments="x:Object">[Config("MachineName")]</OutArgument>
                                    </ui:AssignOperation.To>
                                    <ui:AssignOperation.Value>
                                      <InArgument x:TypeArguments="x:Object">[Environment.MachineName]</InArgument>
                                    </ui:AssignOperation.Value>
                                  </ui:AssignOperation>
                                </scg:List>
                              </ui:MultipleAssign.AssignOperations>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:MultipleAssign>
                            <Assign sap:VirtualizedContainerService.HintSize="376,60" sap2010:WorkflowViewState.IdRef="Assign_31">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Object">[Config("LocalDriveLogFilePath")]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[Config("LocalDriveLogFilePath").ToString.Replace("{date}", Config("CurrentDate").ToString).Replace("{time}", Config("CurrentTime").ToString)]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <If Condition="[Directory.Exists(Config(&quot;LocalDriveLogsFolderPath&quot;).ToString)]" DisplayName="If(Creating Local Drive Logs File)" sap:VirtualizedContainerService.HintSize="376,51" sap2010:WorkflowViewState.IdRef="If_16">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="476,991" sap2010:WorkflowViewState.IdRef="Sequence_34">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,93" sap2010:WorkflowViewState.IdRef="LogMessage_45" Level="Info" Message="[&quot;Folder path: &quot; + Config(&quot;LocalDriveLogsFolderPath&quot;).ToString + &quot; exist.&quot;]" />
                                  <ui:DeleteFolderX DisplayName="Delete Folder" sap:VirtualizedContainerService.HintSize="434,80" sap2010:WorkflowViewState.IdRef="DeleteFolderX_1" Path="[Config(&quot;LocalDriveLogsFolderPath&quot;).ToString]" Recursive="True" />
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,93" sap2010:WorkflowViewState.IdRef="LogMessage_46" Level="Info" Message="[&quot;Folder path: &quot; + Config(&quot;LocalDriveLogsFolderPath&quot;).ToString + &quot; deleted.&quot;]" />
                                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="434,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_1" Path="[Config(&quot;LocalDriveLogsFolderPath&quot;).ToString]" />
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,91" sap2010:WorkflowViewState.IdRef="LogMessage_47" Level="Info" Message="[&quot;Folder path: &quot; + Config(&quot;LocalDriveLogsFolderPath&quot;).ToString + &quot; created.&quot;]" />
                                  <ui:CreateFile ContinueOnError="{x:Null}" Name="{x:Null}" Output="{x:Null}" DisplayName="Create File" sap:VirtualizedContainerService.HintSize="434,132" sap2010:WorkflowViewState.IdRef="CreateFile_1" Path="[Config(&quot;LocalDriveLogFilePath&quot;).ToString]" />
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,91" sap2010:WorkflowViewState.IdRef="LogMessage_48" Level="Info" Message="[&quot;Created &quot; + Config(&quot;LocalDriveLogFilePath&quot;).ToString + &quot; log file path.&quot;]" />
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="376,610" sap2010:WorkflowViewState.IdRef="Sequence_35">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,80" sap2010:WorkflowViewState.IdRef="CreateDirectory_2" Path="[Config(&quot;LocalDriveLogsFolderPath&quot;).ToString]" />
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,93" sap2010:WorkflowViewState.IdRef="LogMessage_49" Level="Info" Message="[&quot;Folder path: &quot; + Config(&quot;LocalDriveLogsFolderPath&quot;).ToString + &quot; created.&quot;]" />
                                  <ui:CreateFile ContinueOnError="{x:Null}" Name="{x:Null}" Output="{x:Null}" DisplayName="Create File" sap:VirtualizedContainerService.HintSize="334,134" sap2010:WorkflowViewState.IdRef="CreateFile_2" Path="[Config(&quot;LocalDriveLogFilePath&quot;).ToString]" />
                                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_50" Level="Info" Message="[&quot;Created &quot; + Config(&quot;LocalDriveLogFilePath&quot;).ToString + &quot; log file path.&quot;]" />
                                </Sequence>
                              </If.Else>
                            </If>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_48" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">
                                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Config(&quot;LocalDriveLogFilePath&quot;).ToString" />
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">
                                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Now.ToString(Config(&quot;CurrentDateLogFormat&quot;).ToString) + &quot; &quot; + Now.ToString(Config(&quot;CurrentTimeLogFormat&quot;).ToString)" />
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">
                                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="&quot;Bot started date and time is: &quot; + Config(&quot;CurrentDate&quot;).ToString + &quot; &quot; + Config(&quot;CurrentTime&quot;).ToString" />
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">
                                  <Literal x:TypeArguments="x:String">Info</Literal>
                                </InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <If Condition="[Directory.Exists(Config(&quot;LocalDriveTemplatesFolderPath&quot;).ToString)]" DisplayName="If(Creating Local Drive Audit Folder)" sap:VirtualizedContainerService.HintSize="376,51" sap2010:WorkflowViewState.IdRef="If_18">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="376,746" sap2010:WorkflowViewState.IdRef="Sequence_42">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_49" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Local drive audit folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString + ") exists."]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:DeleteFolderX DisplayName="Delete Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="DeleteFolderX_2" Path="[Config(&quot;LocalDriveTemplatesFolderPath&quot;).ToString]" Recursive="True" />
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_50" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Deleted local drive audit folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString+ ")."]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_4" Path="[Config(&quot;LocalDriveTemplatesFolderPath&quot;).ToString]" />
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_51" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Created local drive audit folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString+ ")."]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="376,475" sap2010:WorkflowViewState.IdRef="Sequence_43">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_52" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Local drive audit folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString + ") not exists."]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="334,79" sap2010:WorkflowViewState.IdRef="CreateDirectory_5" Path="[Config(&quot;LocalDriveTemplatesFolderPath&quot;).ToString]" />
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_53" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Created local drive audit folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString+ ")."]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </Sequence>
                              </If.Else>
                            </If>
                            <Sequence DisplayName="Sequence(Copying share drive templates into local drive templates folder)" sap:VirtualizedContainerService.HintSize="376,66" sap2010:WorkflowViewState.IdRef="Sequence_44">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_54" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Copying template files from share drive templates folder(Path: "+ Config("ShareDriveTemplatesFolderPath").ToString + ")" + " to local drive templates folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString + ")"]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeWorkflowFile>
                              <InvokeMethod sap2010:Annotation.AnnotationText="Copying Template files from share drive to local drive" DisplayName="Invoke Method(Copying Template files from share drive to local drive)" sap:VirtualizedContainerService.HintSize="334,176" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="CopyDirectory" TargetType="mvf:FileSystem">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <InArgument x:TypeArguments="x:String">[Config("ShareDriveTemplatesFolderPath").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String">[Config("LocalDriveTemplatesFolderPath").ToString + "\"]</InArgument>
                                <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                              </InvokeMethod>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_55" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Copied template files from share drive templates folder(Path: "+ Config("ShareDriveTemplatesFolderPath").ToString + ")" + " to local drive templates folder(Path: " + Config("LocalDriveTemplatesFolderPath").ToString + ")"]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeWorkflowFile>
                            </Sequence>
                            <ui:KillProcess AppliesTo="{x:Null}" ContinueOnError="{x:Null}" Process="{x:Null}" DisplayName="Kill Process" sap:VirtualizedContainerService.HintSize="376,132" sap2010:WorkflowViewState.IdRef="KillProcess_2" ProcessName="OUTLOOK" />
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_75" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Outlook application killled</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <Delay Duration="00:00:02" sap:VirtualizedContainerService.HintSize="376,22" sap2010:WorkflowViewState.IdRef="Delay_1" />
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_76" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">2 seconds delay after killing outlook</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <ui:StartProcess Arguments="{x:Null}" WorkingDirectory="{x:Null}" DisplayName="Start Process (Starting Outlook Application)" FileName="[Config(&quot;OutlookApplicationPath&quot;).ToString]" sap:VirtualizedContainerService.HintSize="376,87" sap2010:WorkflowViewState.IdRef="StartProcess_1" />
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_73" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Outlook Application Started</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <TryCatch DisplayName="Try Catch(Started Email)" sap:VirtualizedContainerService.HintSize="376,51" sap2010:WorkflowViewState.IdRef="TryCatch_13">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <TryCatch.Try>
                                <Sequence sap:VirtualizedContainerService.HintSize="407,562" sap2010:WorkflowViewState.IdRef="Sequence_50">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_27">
                                    <ui:AddLogFields.Fields>
                                      <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">SendEmailNotification</InArgument>
                                    </ui:AddLogFields.Fields>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddLogFields>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\SendEmailNotification.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_56" UnSafe="False" WorkflowFileName="ProjectComponents\SendEmailNotification.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException" />
                                      <InArgument x:TypeArguments="x:String" x:Key="in_MailType">[Config("StartMailType").ToString]</InArgument>
                                      <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException" />
                                      <InArgument x:TypeArguments="sd:DataRow" x:Key="in_TransactionItem" />
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrMailTemplateFile">[Config("LocalDriveTemplatesFolderPath").ToString + "\" + Config("StartMailBodyTemplateFile").ToString]</InArgument>
                                      <InArgument x:TypeArguments="s:String[]" x:Key="in_arrStrFilePaths" />
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_28">
                                    <ui:AddLogFields.Fields>
                                      <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                                    </ui:AddLogFields.Fields>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddLogFields>
                                </Sequence>
                              </TryCatch.Try>
                              <TryCatch.Catches>
                                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,21" sap2010:WorkflowViewState.IdRef="Catch`1_14">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ActivityAction x:TypeArguments="s:Exception">
                                    <ActivityAction.Argument>
                                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                    </ActivityAction.Argument>
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_57" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured while sending started email. Exception Message: " + exception.Message]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                  </ActivityAction>
                                </Catch>
                              </TryCatch.Catches>
                            </TryCatch>
                            <If sap2010:Annotation.AnnotationText="Overwrite queue name from in configuration file in case the argument in_OrchestratorQueueName is specified.&#xA;This provides backward compatibility with &lt; 2018.3." Condition="[Not String.IsNullOrWhiteSpace(in_OrchestratorQueueName)]" DisplayName="If in_OrchestratorQueueName is specified" sap:VirtualizedContainerService.HintSize="376,168" sap2010:WorkflowViewState.IdRef="If_10">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Assign DisplayName="Assign OrchestratorQueueName" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_20">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[Config("OrchestratorQueueName")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Object">[in_OrchestratorQueueName]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                            <If sap2010:Annotation.AnnotationText="Overwrite folder name from in configuration file in case the argument in_OrchestratorQueueFolder is specified.&#xA;This provides backward compatibility with &lt; 2018.3." Condition="[Not String.IsNullOrWhiteSpace(in_OrchestratorQueueFolder)]" DisplayName="If in_OrchestratorQueueFolder is specified" sap:VirtualizedContainerService.HintSize="376,168" sap2010:WorkflowViewState.IdRef="If_12">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <Assign DisplayName="Assign OrchestratorQueueFolder" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_28">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[Config("OrchestratorQueueFolder")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">[in_OrchestratorQueueFolder]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_5">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">KillAllProcesses</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Kills all Windows processes representing applications used in this business process to assure that the execution starts in a clean state.&#xA;Since the applications are assumed to be already closed, CloseAllApplications is skipped and just KillAllProcess is invoked." DisplayName="Invoke KillAllProcesses workflow (first run)" sap:VirtualizedContainerService.HintSize="376,213" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_29">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_6">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Pre_Initialization</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Pre_Initialization workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_31" UnSafe="False" WorkflowFileName="ProjectComponents\Pre_Initialization.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_20">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_7">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Create_Audit_DataTables</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\Create_Audit_DataTables.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_72" UnSafe="False" WorkflowFileName="ProjectComponents\Create_Audit_DataTables.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtConsolidatedAuditData">[dtConsolidatedAuditData]</OutArgument>
                                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dtConsolidatedTransactionData">[dtConsolidatedTransactionData]</OutArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="376,139" sap2010:WorkflowViewState.IdRef="AddLogFields_21">
                              <ui:AddLogFields.Fields>
                                <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                              </ui:AddLogFields.Fields>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:AddLogFields>
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_71" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Retriving FBTI User credentials from Orchestartaor Folder: " + Config("OrchestratorAssetFolder").ToString + "\Orchestrator Asset: " + Config("FBTICredentialsAssetName").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                            <ui:GetRobotCredential TimeoutMS="{x:Null}" AssetName="[Config(&quot;FBTICredentialsAssetName&quot;).ToString]" CacheStrategy="None" DisplayName="Get Credential(FBTI Portal Credentials)" FolderPath="[Config(&quot;OrchestratorAssetFolder&quot;).ToString]" sap:VirtualizedContainerService.HintSize="376,180" sap2010:WorkflowViewState.IdRef="GetRobotCredential_2" Password="[secStrFBTIPassword]" Username="[strFBTIUserID]" />
                            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="376,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_43" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Fetched FBTI UserId and Password from Asset: " + Config("FBTICredentialsAssetName").ToString]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                            </ui:InvokeWorkflowFile>
                          </Sequence>
                        </If.Then>
                      </If>
                      <If sap2010:Annotation.AnnotationText="If MaxConsecutiveSystemExceptions number was reached, throw Exception at initialization and go to End Process state, thus finalizing the execution. &#xA;If MaxConsecutiveSystemExceptions is 0, then any number of consecutive System Exceptions is allowed." Condition="[Cint(Config(&quot;MaxConsecutiveSystemExceptions&quot;))&gt;0 AndAlso ConsecutiveSystemExceptions&gt;=Cint(Config(&quot;MaxConsecutiveSystemExceptions&quot;))]" DisplayName="If maxConsecutiveSystemExceptions exceeded" sap:VirtualizedContainerService.HintSize="484,243" sap2010:WorkflowViewState.IdRef="If_13">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Throw DisplayName="Throw Consecutive Exceptions exceeded" Exception="[new Exception(Config(&quot;ExceptionMessage_ConsecutiveErrors&quot;).ToString + &quot; Consecutive retry number: &quot; + (ConsecutiveSystemExceptions+1).ToString)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
                        </If.Then>
                      </If>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="484,139" sap2010:WorkflowViewState.IdRef="AddLogFields_8">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">InitAllApplications</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke InitiAllApplications workflow" sap:VirtualizedContainerService.HintSize="484,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="Framework\InitAllApplications.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                            <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_StrFBTIUserID">
                            <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="strFBTIUserID" />
                          </InArgument>
                          <InArgument x:TypeArguments="ss:SecureString" x:Key="in_SecStrFBTIPassword">
                            <mva:VisualBasicValue x:TypeArguments="ss:SecureString" ExpressionText="secStrFBTIPassword" />
                          </InArgument>
                          <OutArgument x:TypeArguments="x:Boolean" x:Key="Out_blnInputFileMoved">
                            <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="blnInputFileMoved" />
                          </OutArgument>
                          <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dtConsolidatedAuditData">
                            <mva:VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="dtConsolidatedAuditData" />
                          </InOutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="484,139" sap2010:WorkflowViewState.IdRef="AddLogFields_59">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                      <If Condition="[Not blnInputFileMoved]" DisplayName="If (Login to FBTI if data exists)" sap:VirtualizedContainerService.HintSize="484,51" sap2010:WorkflowViewState.IdRef="If_26">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <Sequence sap:VirtualizedContainerService.HintSize="376,289" sap2010:WorkflowViewState.IdRef="Sequence_72">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:UiElementExists DisplayName="Element Exists (FBTI Home Page)" Exists="[blnHomePage]" sap:VirtualizedContainerService.HintSize="334,106" sap2010:WorkflowViewState.IdRef="UiElementExists_1">
                              <ui:UiElementExists.Target>
                                <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="454d99c6-7ac1-426c-9dc7-d0ce06e01aed" InformativeScreenshot="e00b8cf613693cd7aea6be9f89077b9b" Selector="&lt;html app='chrome.exe' title='Fusion Trade Innovation' /&gt;&lt;webctrl tag='H4' aaname='Fusion Trade Innovation Global Application' /&gt;" TimeoutMS="3000">
                                  <ui:Target.WaitForReady>
                                    <InArgument x:TypeArguments="ui:WaitForReady" />
                                  </ui:Target.WaitForReady>
                                </ui:Target>
                              </ui:UiElementExists.Target>
                            </ui:UiElementExists>
                            <If Condition="[blnHomePage]" DisplayName="If (Checking FBTI already logged in or not)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="If_27">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <If.Then>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_121" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">FBTI portal is already logged in.</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </If.Then>
                              <If.Else>
                                <Sequence sap:VirtualizedContainerService.HintSize="381,383" sap2010:WorkflowViewState.IdRef="Sequence_71">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="339,139" sap2010:WorkflowViewState.IdRef="AddLogFields_58">
                                    <ui:AddLogFields.Fields>
                                      <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">FBTI_Portal_Login</InArgument>
                                    </ui:AddLogFields.Fields>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddLogFields>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\FBTI_Portal_Login.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="339,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_122" UnSafe="False" WorkflowFileName="ProjectComponents\FBTI_Portal_Login.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrFBTIUserID">[strFBTIUserID]</InArgument>
                                      <InArgument x:TypeArguments="ss:SecureString" x:Key="in_SecStrFBTIPassword">[secStrFBTIPassword]</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </Sequence>
                              </If.Else>
                            </If>
                          </Sequence>
                        </If.Then>
                        <If.Else>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_70">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </Sequence>
                        </If.Else>
                      </If>
                      <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="484,139" sap2010:WorkflowViewState.IdRef="AddLogFields_22">
                        <ui:AddLogFields.Fields>
                          <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                        </ui:AddLogFields.Fields>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:AddLogFields>
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="ui:BusinessRuleException" sap:VirtualizedContainerService.HintSize="444,21" sap2010:WorkflowViewState.IdRef="Catch`1_15">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="ui:BusinessRuleException">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="ui:BusinessRuleException" Name="exception" />
                        </ActivityAction.Argument>
                        <TryCatch DisplayName="Try Catch (Init Business Exception)" sap:VirtualizedContainerService.HintSize="438,1789" sap2010:WorkflowViewState.IdRef="TryCatch_23">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <TryCatch.Try>
                            <Sequence DisplayName="Sequence - Initialization Business Exception" sap:VirtualizedContainerService.HintSize="526,1562" sap2010:WorkflowViewState.IdRef="Sequence_45">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_36">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <Assign sap2010:Annotation.AnnotationText="Business failures during the initialization are considered business exceptions and lead to the End Process state, thus finalizing the execution." DisplayName="Assign SystemException" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="Assign_36">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="ui:BusinessRuleException">[BusinessException]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="ui:BusinessRuleException">[exception]</InArgument>
                                </Assign.Value>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Assign>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_77" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">
                                    <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Config(&quot;LocalDriveLogFilePath&quot;).ToString" />
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">
                                    <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Now.ToString(Config(&quot;CurrentDateLogFormat&quot;).ToString) + &quot; &quot; + Now.ToString(Config(&quot;CurrentTimeLogFormat&quot;).ToString)" />
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">
                                    <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="&quot;Business exception occured at Intitilization. Exception Message: &quot; + BusinessException.Message" />
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">
                                    <Literal x:TypeArguments="x:String">Error</Literal>
                                  </InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <If Condition="[BusinessException.Message.ToLower.Trim.Contains(&quot;invalid fbti login credentials&quot;)]" DisplayName="If(Checking business exception)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="If_19">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence sap:VirtualizedContainerService.HintSize="242,379" sap2010:WorkflowViewState.IdRef="Sequence_54">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="200,139" sap2010:WorkflowViewState.IdRef="AddLogFields_39">
                                      <ui:AddLogFields.Fields>
                                        <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">TakeScreenshot</InArgument>
                                      </ui:AddLogFields.Fields>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:AddLogFields>
                                    <TryCatch sap2010:Annotation.AnnotationText="Take a screenshot of the current state of the screen to facilitate debugging." DisplayName="Try taking screenshot" sap:VirtualizedContainerService.HintSize="200,108" sap2010:WorkflowViewState.IdRef="TryCatch_17">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <TryCatch.Try>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke TakeScreenshot workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_78" UnSafe="False" WorkflowFileName="Framework\TakeScreenshot.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_Folder">[Config("ExScreenshotsFolderPath").ToString]</InArgument>
                                            <InOutArgument x:TypeArguments="x:String" x:Key="io_FilePath">[strScreenshotPath]</InOutArgument>
                                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </TryCatch.Try>
                                      <TryCatch.Catches>
                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_20">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <ActivityAction x:TypeArguments="s:Exception">
                                            <ActivityAction.Argument>
                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                                            </ActivityAction.Argument>
                                            <Sequence sap:VirtualizedContainerService.HintSize="376,204" sap2010:WorkflowViewState.IdRef="Sequence_53">
                                              <sap:WorkflowViewStateService.ViewState>
                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                </scg:Dictionary>
                                              </sap:WorkflowViewStateService.ViewState>
                                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_79" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                                <ui:InvokeWorkflowFile.Arguments>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Failed to take screenshot: "+Exception.Message+" at Source: "+Exception.Source+" At Source: "+Exception.Source]</InArgument>
                                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Warn</InArgument>
                                                </ui:InvokeWorkflowFile.Arguments>
                                              </ui:InvokeWorkflowFile>
                                            </Sequence>
                                          </ActivityAction>
                                        </Catch>
                                      </TryCatch.Catches>
                                    </TryCatch>
                                  </Sequence>
                                </If.Then>
                              </If>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_40">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">SendEmailNotification</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <TryCatch DisplayName="Try Catch(Business Exception Email)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="TryCatch_18">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <TryCatch.Try>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\SendEmailNotification.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_80" UnSafe="False" WorkflowFileName="ProjectComponents\SendEmailNotification.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException">[BusinessException]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_MailType">[Config("BEMailType").ToString]</InArgument>
                                      <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException" />
                                      <InArgument x:TypeArguments="sd:DataRow" x:Key="in_TransactionItem" />
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrMailTemplateFile">[Config("LocalDriveTemplatesFolderPath").ToString + "\" + Config("BUBodyTemplateFile").ToString]</InArgument>
                                      <InArgument x:TypeArguments="s:String[]" x:Key="in_arrStrFilePaths">[{strScreenshotPath}]</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_21">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_81" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                        <ui:InvokeWorkflowFile.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured while sending business exception mail. Exception Message: " + exception.Message]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                                        </ui:InvokeWorkflowFile.Arguments>
                                      </ui:InvokeWorkflowFile>
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_53">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <If Condition="[strScreenshotPath IsNot Nothing]" DisplayName="If (Screenshot is not empty)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="If_20">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence sap:VirtualizedContainerService.HintSize="376,553" sap2010:WorkflowViewState.IdRef="Sequence_55">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_82" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage" xml:space="preserve">["Moving exception screenshot from local drive exception_screenshots(Path: " + strScreenshotPath + ") to Share drive exception_screenshots(Path: " + Config("ShareDriveExceptionScreenshotsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\" + Path.GetFileName(strScreenshotPath) + ")."]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                    <ui:MoveFile ContinueOnError="{x:Null}" DestinationResource="{x:Null}" PathResource="{x:Null}" Destination="[Config(&quot;ShareDriveExceptionScreenshotsFolderPath&quot;).ToString + &quot;\&quot; + Config(&quot;CurrentYear&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentMonth&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentDate&quot;).ToString + &quot;\&quot; + Path.GetFileName(strScreenshotPath)]" DisplayName="Move File" sap:VirtualizedContainerService.HintSize="334,157" sap2010:WorkflowViewState.IdRef="MoveFile_1" Overwrite="True" Path="[strScreenshotPath]" />
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_83" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage" xml:space="preserve">["Moved exception screenshot from local drive exception_screenshots(Path: " + strScreenshotPath + ") to Share drive exception_screenshots(Path: " + Config("ShareDriveExceptionScreenshotsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\" + Path.GetFileName(strScreenshotPath) + ")."]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                  </Sequence>
                                </If.Then>
                                <If.Else>
                                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_56">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </Sequence>
                                </If.Else>
                              </If>
                              <Sequence DisplayName="Sequence(Updating audit data table)" sap:VirtualizedContainerService.HintSize="334,66" sap2010:WorkflowViewState.IdRef="Sequence_64">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_38">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[Config("AuditFileSerialNumber")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[(CInt(Config("AuditFileSerialNumber").ToString)  + 1).ToString]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Config(&quot;AuditFileSerialNumber&quot;).ToString, Config(&quot;MachineName&quot;).ToString, Config(&quot;CurrentDate&quot;).ToString + &quot; &quot; + Config(&quot;CurrentTime&quot;).ToString, Now.ToString(Config(&quot;CurrentDateFormat&quot;).ToString) + &quot; &quot; + Now.ToString(Config(&quot;CurrentTimeFormat&quot;).ToString), Config(&quot;AuditComment5&quot;).ToString.Replace(&quot;{XamlName}&quot;,&quot;Initialization&quot;).Replace(&quot;{Case Id}&quot;,&quot;&quot;).Replace(&quot;{Exception Message}&quot;, BusinessException.Message)}]" DataTable="[dtConsolidatedAuditData]" DisplayName="Add Data Row(Business Exception at intialization)" sap:VirtualizedContainerService.HintSize="334,185" sap2010:WorkflowViewState.IdRef="AddDataRow_1">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:AddDataRow>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_109" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Business exception message added to data table</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </Sequence>
                              <TryCatch DisplayName="Try Catch (Calling API Init Business Exception)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="TryCatch_22">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <TryCatch.Try>
                                  <Sequence sap:VirtualizedContainerService.HintSize="387,474" sap2010:WorkflowViewState.IdRef="Sequence_65">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="345,139" sap2010:WorkflowViewState.IdRef="AddLogFields_54">
                                      <ui:AddLogFields.Fields>
                                        <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Update_Status_API</InArgument>
                                      </ui:AddLogFields.Fields>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:AddLogFields>
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\Update_Status_API.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="345,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_110" UnSafe="False" WorkflowFileName="ProjectComponents\Update_Status_API.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                          <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                                        </InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_strAPIBody">
                                          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Config(&quot;PostAPIBody&quot;).ToString.Replace(&quot;{BotResponse}&quot;,Config(&quot;AuditComment5&quot;).ToString.Replace(&quot;{XamlName}&quot;,&quot;Initialization&quot;).Replace(&quot;{Case Id}&quot;,&quot;&quot;).Replace(&quot;{Exception Message}&quot;, BusinessException.Message)).Replace(&quot;{BotStatus}&quot;,&quot;Failed&quot;).Replace(&quot;{ExceptionScreenshotPath}&quot;,if(strScreenshotPath IsNot Nothing, Config(&quot;ShareDriveExceptionScreenshotsFolderPath&quot;).ToString + &quot;\&quot; + Config(&quot;CurrentYear&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentMonth&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentDate&quot;).ToString + &quot;\&quot; + Path.GetFileName(strScreenshotPath).ToString, &quot;&quot;)).Replace(&quot;{type}&quot;,Config(&quot;PostAPIType1Name&quot;).ToString.Trim)" />
                                        </InArgument>
                                        <OutArgument x:TypeArguments="x:Boolean" x:Key="out_blnAPIStatus">
                                          <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="blnAPIStatus" />
                                        </OutArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                    <If Condition="[blnAPIStatus]" DisplayName="If (Checking API Status)" sap:VirtualizedContainerService.HintSize="345,51" sap2010:WorkflowViewState.IdRef="If_24">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <If.Then>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_111" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Business Exception sent to API successfully</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </If.Then>
                                      <If.Else>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_112" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">API failed to send business exception.</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </If.Else>
                                    </If>
                                  </Sequence>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_25">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <Sequence sap:VirtualizedContainerService.HintSize="376,383" sap2010:WorkflowViewState.IdRef="Sequence_66">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_55">
                                          <ui:AddLogFields.Fields>
                                            <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                                          </ui:AddLogFields.Fields>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:AddLogFields>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_113" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured while calling API at Initilization. Exception Message: " + exception.Message]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </Sequence>
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_43">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Main_Initialization</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                            </Sequence>
                          </TryCatch.Try>
                          <TryCatch.Catches>
                            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_26">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ActivityAction x:TypeArguments="s:Exception">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                </ActivityAction.Argument>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_114" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured at initilization\Catch\business exception. Exception Message: " + exception.Message]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </ActivityAction>
                            </Catch>
                          </TryCatch.Catches>
                        </TryCatch>
                      </ActivityAction>
                    </Catch>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="444,1915" sap2010:WorkflowViewState.IdRef="Catch`1_18">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                        </ActivityAction.Argument>
                        <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="438,1846" sap2010:WorkflowViewState.IdRef="TryCatch_25">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <TryCatch.Try>
                            <Sequence DisplayName="Sequence - Initializtion System Exception" sap:VirtualizedContainerService.HintSize="376,1619" sap2010:WorkflowViewState.IdRef="Sequence_46">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:String" Name="strScreenshotPath" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap2010:Annotation.AnnotationText="Failures during the initialization are considered system exceptions and lead to the End Process state, thus finalizing the execution." DisplayName="Assign SystemException" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="Assign_37">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="s:Exception">[SystemException]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                                </Assign.Value>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Assign>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_88" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">
                                    <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Config(&quot;LocalDriveLogFilePath&quot;).ToString" />
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">
                                    <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Now.ToString(Config(&quot;CurrentDateLogFormat&quot;).ToString) + &quot; &quot; + Now.ToString(Config(&quot;CurrentTimeLogFormat&quot;).ToString)" />
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">
                                    <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="&quot;System exception at initialization. Exception Message: &quot; + SystemException.Message + &quot; at Source: &quot; + SystemException.Source" />
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">
                                    <Literal x:TypeArguments="x:String">Error</Literal>
                                  </InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the process name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (BusinessProcessName)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_44">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">TakeScreenshot</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <TryCatch sap2010:Annotation.AnnotationText="Take a screenshot of the current state of the screen to facilitate debugging." DisplayName="Try taking screenshot" sap:VirtualizedContainerService.HintSize="334,108" sap2010:WorkflowViewState.IdRef="TryCatch_16">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <TryCatch.Try>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke TakeScreenshot workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_62" UnSafe="False" WorkflowFileName="Framework\TakeScreenshot.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_Folder">[Config("ExScreenshotsFolderPath").ToString]</InArgument>
                                      <InOutArgument x:TypeArguments="x:String" x:Key="io_FilePath">[strScreenshotPath]</InOutArgument>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_19">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                                      </ActivityAction.Argument>
                                      <Sequence sap:VirtualizedContainerService.HintSize="376,204" sap2010:WorkflowViewState.IdRef="Sequence_47">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_63" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Failed to take screenshot: "+Exception.Message+" at Source: "+Exception.Source+" At Source: "+Exception.Source]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Warn</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </Sequence>
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the process name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (BusinessProcessName)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_45">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">SendEmailNotification</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <TryCatch DisplayName="Try Catch(System Exception Email)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="TryCatch_20">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <TryCatch.Try>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\SendEmailNotification.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_89" UnSafe="False" WorkflowFileName="ProjectComponents\SendEmailNotification.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException" />
                                      <InArgument x:TypeArguments="x:String" x:Key="in_MailType">[Config("SEMailType").ToString]</InArgument>
                                      <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException">[SystemException]</InArgument>
                                      <InArgument x:TypeArguments="sd:DataRow" x:Key="in_TransactionItem" />
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrMailTemplateFile">[Config("LocalDriveTemplatesFolderPath").ToString + "\" + Config("SEBodyTemplateFile").ToString]</InArgument>
                                      <InArgument x:TypeArguments="s:String[]" x:Key="in_arrStrFilePaths">[{strScreenshotPath}]</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_23">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_90" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                        <ui:InvokeWorkflowFile.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured while sending system exception mail. Exception Message: " + exception.Message]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                                        </ui:InvokeWorkflowFile.Arguments>
                                      </ui:InvokeWorkflowFile>
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the process name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (BusinessProcessName)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_46">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Main_Initialization</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <If Condition="[strScreenshotPath IsNot Nothing]" DisplayName="If (Checking screenshot is empty or not)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="If_22">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence sap:VirtualizedContainerService.HintSize="376,553" sap2010:WorkflowViewState.IdRef="Sequence_59">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_91" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage" xml:space="preserve">["Moving exception screenshot from local drive exception_screenshots(Path: " + strScreenshotPath + ") to Share drive exception_screenshots(Path: " + Config("ShareDriveExceptionScreenshotsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\" + Path.GetFileName(strScreenshotPath) + ")."]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                    <ui:MoveFile ContinueOnError="{x:Null}" DestinationResource="{x:Null}" PathResource="{x:Null}" Destination="[Config(&quot;ShareDriveExceptionScreenshotsFolderPath&quot;).ToString + &quot;\&quot; + Config(&quot;CurrentYear&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentMonth&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentDate&quot;).ToString + &quot;\&quot; + Path.GetFileName(strScreenshotPath)]" DisplayName="Move File" sap:VirtualizedContainerService.HintSize="334,157" sap2010:WorkflowViewState.IdRef="MoveFile_2" Overwrite="True" Path="[strScreenshotPath]" />
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_92" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage" xml:space="preserve">["Moved exception screenshot from local drive exception_screenshots(Path: " + strScreenshotPath + ") to Share drive exception_screenshots(Path: " + Config("ShareDriveExceptionScreenshotsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\" + Path.GetFileName(strScreenshotPath) + ")."]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                  </Sequence>
                                </If.Then>
                                <If.Else>
                                  <Sequence sap:VirtualizedContainerService.HintSize="376,204" sap2010:WorkflowViewState.IdRef="Sequence_60">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_93" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Screenshot path is empty</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                  </Sequence>
                                </If.Else>
                              </If>
                              <Sequence DisplayName="Sequence(Updating audit data table)" sap:VirtualizedContainerService.HintSize="334,66" sap2010:WorkflowViewState.IdRef="Sequence_67">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_39">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[Config("AuditFileSerialNumber")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[(CInt(Config("AuditFileSerialNumber").ToString)  + 1).ToString]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{Config(&quot;AuditFileSerialNumber&quot;).ToString, Config(&quot;MachineName&quot;).ToString, Config(&quot;CurrentDate&quot;).ToString + &quot; &quot; + Config(&quot;CurrentTime&quot;).ToString, Now.ToString(Config(&quot;CurrentDateFormat&quot;).ToString) + &quot; &quot; + Now.ToString(Config(&quot;CurrentTimeFormat&quot;).ToString), Config(&quot;AuditComment4&quot;).ToString.Replace(&quot;{XamlName}&quot;,&quot;Initialization&quot;).Replace(&quot;{Case Id}&quot;,&quot;&quot;)}]" DataTable="[dtConsolidatedAuditData]" DisplayName="Add Data Row(Initialization System Exception)" sap:VirtualizedContainerService.HintSize="334,185" sap2010:WorkflowViewState.IdRef="AddDataRow_2">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:AddDataRow>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_115" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">System exception message added to data table</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </Sequence>
                              <TryCatch DisplayName="Try Catch (Calling API Init System Exception)" sap:VirtualizedContainerService.HintSize="334,51" sap2010:WorkflowViewState.IdRef="TryCatch_24">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <TryCatch.Try>
                                  <Sequence sap:VirtualizedContainerService.HintSize="387,474" sap2010:WorkflowViewState.IdRef="Sequence_68">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="345,139" sap2010:WorkflowViewState.IdRef="AddLogFields_56">
                                      <ui:AddLogFields.Fields>
                                        <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Update_Status_API</InArgument>
                                      </ui:AddLogFields.Fields>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:AddLogFields>
                                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="ProjectComponents\Update_Status_API.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="345,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_116" UnSafe="False" WorkflowFileName="ProjectComponents\Update_Status_API.xaml">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">
                                          <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, x:Object)" ExpressionText="Config" />
                                        </InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_strAPIBody">
                                          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Config(&quot;PostAPIBody&quot;).ToString.Replace(&quot;{BotResponse}&quot;,Config(&quot;AuditComment4&quot;).ToString.Replace(&quot;{XamlName}&quot;,&quot;Initialization&quot;).Replace(&quot;{Case Id}&quot;,&quot;&quot;)).Replace(&quot;{BotStatus}&quot;,&quot;Failed&quot;).Replace(&quot;{ExceptionScreenshotPath}&quot;,if(strScreenshotPath IsNot Nothing, Config(&quot;ShareDriveExceptionScreenshotsFolderPath&quot;).ToString + &quot;\&quot; + Config(&quot;CurrentYear&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentMonth&quot;).ToString + &quot;\&quot;  + Config(&quot;CurrentDate&quot;).ToString + &quot;\&quot; + Path.GetFileName(strScreenshotPath).ToString, &quot;&quot;)).Replace(&quot;{type}&quot;,Config(&quot;PostAPIType1Name&quot;).ToString.Trim)" />
                                        </InArgument>
                                        <OutArgument x:TypeArguments="x:Boolean" x:Key="out_blnAPIStatus">
                                          <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="blnAPIStatus" />
                                        </OutArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                    <If Condition="[blnAPIStatus]" DisplayName="If (Checking API Status)" sap:VirtualizedContainerService.HintSize="345,51" sap2010:WorkflowViewState.IdRef="If_25">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <If.Then>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_117" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">System Exception sent to API successfully</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </If.Then>
                                      <If.Else>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_118" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">API failed to send system exception.</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </If.Else>
                                    </If>
                                  </Sequence>
                                </TryCatch.Try>
                                <TryCatch.Catches>
                                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_27">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ActivityAction x:TypeArguments="s:Exception">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                      </ActivityAction.Argument>
                                      <Sequence sap:VirtualizedContainerService.HintSize="376,383" sap2010:WorkflowViewState.IdRef="Sequence_69">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_57">
                                          <ui:AddLogFields.Fields>
                                            <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_Initialization</InArgument>
                                          </ui:AddLogFields.Fields>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:AddLogFields>
                                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_119" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                          <ui:InvokeWorkflowFile.Arguments>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured while calling API at Initilization. Exception Message: " + exception.Message]</InArgument>
                                            <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                          </ui:InvokeWorkflowFile.Arguments>
                                        </ui:InvokeWorkflowFile>
                                      </Sequence>
                                    </ActivityAction>
                                  </Catch>
                                </TryCatch.Catches>
                              </TryCatch>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the process name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (BusinessProcessName)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_49">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Main_Initialization</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                            </Sequence>
                          </TryCatch.Try>
                          <TryCatch.Catches>
                            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_28">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ActivityAction x:TypeArguments="s:Exception">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                </ActivityAction.Argument>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_120" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Exception occured at initilization\Catch\system exception. Exception Message: " + exception.Message]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </ActivityAction>
                            </Catch>
                          </TryCatch.Catches>
                        </TryCatch>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </State.Entry>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">223,6.66666666666666</av:Point>
                  <av:Size x:Key="ShapeSize">254,103</av:Size>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Double x:Key="StateContainerWidth">220</x:Double>
                  <x:Double x:Key="StateContainerHeight">25</x:Double>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <State.Transitions>
                <Transition DisplayName="System Exception (failed initialization)" sap:VirtualizedContainerService.HintSize="450,856" sap2010:WorkflowViewState.IdRef="Transition_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">350,109.666666666667 350,143 82.8,143 82.8,208</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">34</x:Int32>
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <State x:Name="__ReferenceID1" sap2010:Annotation.AnnotationText="End process and close all applications used." DisplayName="End Process" sap:VirtualizedContainerService.HintSize="144,119" sap2010:WorkflowViewState.IdRef="State_1" IsFinal="True">
                      <State.Entry>
                        <TryCatch DisplayName="Try to close all aplications" sap:VirtualizedContainerService.HintSize="445,2829" sap2010:WorkflowViewState.IdRef="TryCatch_4">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <TryCatch.Try>
                            <Sequence sap:VirtualizedContainerService.HintSize="407,2602" sap2010:WorkflowViewState.IdRef="Sequence_31">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_10">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_End Process</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_11">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">CloseAllApplications</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CloseAllApplications workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_21" UnSafe="False" WorkflowFileName="Framework\CloseAllApplications.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtConsolidatedAuditData">[dtConsolidatedAuditData]</InArgument>
                                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_dtConsolidatedTransactionData">[dtConsolidatedTransactionData]</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_24">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_End Process</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_12">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">KillAllProcesses</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke KillAllProcesses workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_30" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_99" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Sending end mail.</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Send end mail" DisplayName="ProjectComponents\SendEmailNotification.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="365,143" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_100" UnSafe="False" WorkflowFileName="ProjectComponents\SendEmailNotification.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="ui:BusinessRuleException" x:Key="in_BusinessException" />
                                  <InArgument x:TypeArguments="x:String" x:Key="in_MailType">[Config("EndMailType").ToString]</InArgument>
                                  <InArgument x:TypeArguments="s:Exception" x:Key="in_SystemException" />
                                  <InArgument x:TypeArguments="sd:DataRow" x:Key="in_TransactionItem" />
                                  <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrMailTemplateFile">[Config("LocalDriveTemplatesFolderPath").ToString + "\" + Config("EndMailBodyTemplateFile").ToString]</InArgument>
                                  <InArgument x:TypeArguments="s:String[]" x:Key="in_arrStrFilePaths" />
                                </ui:InvokeWorkflowFile.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeWorkflowFile>
                              <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="365,139" sap2010:WorkflowViewState.IdRef="AddLogFields_25">
                                <ui:AddLogFields.Fields>
                                  <InArgument x:TypeArguments="x:String" x:Key="Executing_Xaml">Main_End Process</InArgument>
                                </ui:AddLogFields.Fields>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:AddLogFields>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_101" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">[Config("DelayAfterSendingEndMail").ToString +" seconds delay after sending end mail."]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <Delay Duration="[TimeSpan.Parse(Config(&quot;DelayAfterSendingEndMail&quot;).ToString)]" sap:VirtualizedContainerService.HintSize="365,22" sap2010:WorkflowViewState.IdRef="Delay_2" />
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_102" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Delay of " + Config("DelayAfterSendingEndMail").ToString + " seconds completed."]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:KillProcess AppliesTo="{x:Null}" Process="{x:Null}" ContinueOnError="True" DisplayName="Kill Process" sap:VirtualizedContainerService.HintSize="365,132" sap2010:WorkflowViewState.IdRef="KillProcess_3" ProcessName="OUTLOOK" />
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_103" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Outlook Application Killed</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="365,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_41" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">[Config("ProcessName").ToString + " is ended."]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <InvokeMethod DisplayName="Invoke Method(Copy)" sap:VirtualizedContainerService.HintSize="365,134" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="CopyDirectory" TargetType="mvf:FileSystem">
                                <InArgument x:TypeArguments="x:String">[Config("LocalDriveLogsFolderPath").ToString + "\"]</InArgument>
                                <InArgument x:TypeArguments="x:String" xml:space="preserve">[Config("ShareDriveLogsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\"]</InArgument>
                                <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                              </InvokeMethod>
                            </Sequence>
                          </TryCatch.Try>
                          <TryCatch.Catches>
                            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="411,21" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ActivityAction x:TypeArguments="s:Exception">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                                </ActivityAction.Argument>
                                <Sequence DisplayName="Failed to close applications, so kill processes" sap:VirtualizedContainerService.HintSize="376,1457" sap2010:WorkflowViewState.IdRef="Sequence_63">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_50">
                                    <ui:AddLogFields.Fields>
                                      <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Main_EndProcess</InArgument>
                                    </ui:AddLogFields.Fields>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddLogFields>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_104" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Applications failed to close gracefully. "+Exception.Message+" at Source: "+Exception.Source]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Warn</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_51">
                                    <ui:AddLogFields.Fields>
                                      <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">KillAllProcesses</InArgument>
                                    </ui:AddLogFields.Fields>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddLogFields>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke KillAllProcesses workflow (End process)" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_105" UnSafe="False" WorkflowFileName="Framework\KillAllProcesses.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[Config]</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:AddLogFields sap2010:Annotation.AnnotationText="Add the xaml name to the logs generated after this point. &#xA;This log field can be used to create reports and visualizations about the process." DisplayName="Add Log Fields (Xaml Name)" sap:VirtualizedContainerService.HintSize="334,139" sap2010:WorkflowViewState.IdRef="AddLogFields_52">
                                    <ui:AddLogFields.Fields>
                                      <InArgument x:TypeArguments="x:String" x:Key="ExecutingXaml">Main_EndProcess</InArgument>
                                    </ui:AddLogFields.Fields>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:AddLogFields>
                                  <ui:KillProcess AppliesTo="{x:Null}" Process="{x:Null}" ContinueOnError="True" DisplayName="Kill Process" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="KillProcess_4" ProcessName="OUTLOOK" />
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_106" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Outlook Application Killed</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_107" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage" xml:space="preserve">["Copying log files from local drive log(Path:" + Config("LocalDriveLogsFolderPath").ToString + ") into share drive logs(Path: " + Config("ShareDriveLogsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\)."]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Warn</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <InvokeMethod DisplayName="Invoke Method(Copy)" sap:VirtualizedContainerService.HintSize="334,134" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="CopyDirectory" TargetType="mvf:FileSystem">
                                    <InArgument x:TypeArguments="x:String">[Config("LocalDriveLogsFolderPath").ToString + "\"]</InArgument>
                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[Config("ShareDriveLogsFolderPath").ToString + "\" + Config("CurrentYear").ToString + "\"  + Config("CurrentMonth").ToString + "\"  + Config("CurrentDate").ToString + "\"]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                  </InvokeMethod>
                                </Sequence>
                              </ActivityAction>
                            </Catch>
                          </TryCatch.Catches>
                          <TryCatch.Finally>
                            <If Condition="[SystemException IsNot Nothing AndAlso (Config Is Nothing OrElse Convert.ToBoolean(Config(&quot;ShouldMarkJobAsFaulted&quot;)))]" DisplayName="If SystemException IsNot Nothing" sap:VirtualizedContainerService.HintSize="484,237" sap2010:WorkflowViewState.IdRef="If_14">
                              <If.Then>
                                <TerminateWorkflow DisplayName="Terminate Main Workflow" Exception="[SystemException]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="TerminateWorkflow_1" />
                              </If.Then>
                            </If>
                          </TryCatch.Finally>
                        </TryCatch>
                      </State.Entry>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">18,208</av:Point>
                          <av:Size x:Key="ShapeSize">144,119</av:Size>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <x:Double x:Key="StateContainerWidth">110</x:Double>
                          <x:Double x:Key="StateContainerHeight">26</x:Double>
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </State>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_64" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["System exception at initialization: " + SystemException.Message + " at Source: " + SystemException.Source]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[SystemException isNot Nothing]</Transition.Condition>
                </Transition>
                <Transition DisplayName="Business Exception (failed initialization)" sap:VirtualizedContainerService.HintSize="450,856" sap2010:WorkflowViewState.IdRef="Transition_9">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">350,109.666666666667 350,161 118.8,161 118.8,208</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">54</x:Int32>
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID1</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_65" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">["Business exception at initialization: " + BusinessException.Message + " at Source: " + BusinessException.Source]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Error</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[BusinessException isNot Nothing]</Transition.Condition>
                </Transition>
                <Transition DisplayName="No Data" sap:VirtualizedContainerService.HintSize="450,1121" sap2010:WorkflowViewState.IdRef="Transition_10">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">350,109.666666666667 350,125 54,125 54,208</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">18</x:Int32>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID1</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_66" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">No input files in shared drive. Moving to End process.</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[blnInputFileMoved]</Transition.Condition>
                </Transition>
                <Transition DisplayName="Success" sap:VirtualizedContainerService.HintSize="450,1121" sap2010:WorkflowViewState.IdRef="Transition_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">350,109.666666666667 350,139.666666666667 349.833333333333,139.666666666667 349.833333333333,212.333333333333</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">38</x:Int32>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID0</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_108" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">[Config("LocalDriveLogFilePath").ToString]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">[Now.ToString(Config("CurrentDateLogFormat").ToString) + " " + Now.ToString(Config("CurrentTimeLogFormat").ToString)]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">Data exists moving to GetTransactionState</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">Info</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[SystemException is Nothing]</Transition.Condition>
                </Transition>
              </State.Transitions>
            </State>
          </Transition.To>
          <Transition.Action>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Logs workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_67" UnSafe="False" WorkflowFileName="ProjectComponents\Logs.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogFilePath">
                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Config(&quot;LocalDriveLogFilePath&quot;).ToString" />
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrDateTime">
                  <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Now.ToString(Config(&quot;CurrentDateLogFormat&quot;).ToString) + &quot; &quot; + Now.ToString(Config(&quot;CurrentTimeLogFormat&quot;).ToString)" />
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogMessage">
                  <Literal x:TypeArguments="x:String">No transaction items moving to Initialization state</Literal>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrLogLevel">
                  <Literal x:TypeArguments="x:String">Info</Literal>
                </InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </Transition.Action>
          <Transition.Condition>[TransactionItem Is Nothing]</Transition.Condition>
        </Transition>
      </State.Transitions>
    </State>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID1</x:Reference>
    <x:Reference>__ReferenceID3</x:Reference>
    <StateMachine.Variables>
      <Variable x:TypeArguments="ui:QueueItem" sap2010:Annotation.AnnotationText="Transaction item to be processed. The type of this variable can be changed to match the transaction type in the process. For example, when processing data from a spreadsheet that is read into a DataTable, this type can be changed to DataRow. " Name="TransactionItem" />
      <Variable x:TypeArguments="s:Exception" sap2010:Annotation.AnnotationText="Used during transitions between states to represent exceptions other than business exceptions." Name="SystemException" />
      <Variable x:TypeArguments="ui:BusinessRuleException" sap2010:Annotation.AnnotationText="Used during transitions between states and represents a situation that does not conform to the rules of the process being automated." Name="BusinessException" />
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Sequential counter of transaction items." Default="1" Name="TransactionNumber" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="Config" />
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Used to control the number of attempts of retrying the transaction processing in case of system exceptions." Default="0" Name="RetryNumber" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Optionally used to include additional information about the transaction item." Name="TransactionField2" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Optionally used to include additional information about the transaction item." Name="TransactionField1" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Transaction ID used for information and logging purposes. Ideally, the ID should be unique for each transaction. " Name="TransactionID" />
      <Variable x:TypeArguments="sd:DataTable" sap2010:Annotation.AnnotationText="Used in case transactions are stored in a DataTable, for example, after being retrieved from a spreadsheet." Name="dt_TransactionData" />
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Used to control the number of consecutive system exceptions." Default="0" Name="ConsecutiveSystemExceptions" />
      <Variable x:TypeArguments="x:String" Name="strFBTIUserID" />
      <Variable x:TypeArguments="ss:SecureString" Name="secStrFBTIPassword" />
      <Variable x:TypeArguments="x:Boolean" Name="blnInputFileMoved" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtConsolidatedAuditData" />
      <Variable x:TypeArguments="sd:DataTable" Name="dtConsolidatedTransactionData" />
      <Variable x:TypeArguments="x:String" Name="strScreenshotPath" />
      <Variable x:TypeArguments="x:Boolean" Name="blnAPIStatus" />
    </StateMachine.Variables>
  </StateMachine>
</Activity>